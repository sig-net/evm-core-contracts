// import { expect } from "chai";
// import { ethers } from "hardhat";
// import { TestBTCTxBuilder } from "../typechain-types";

// describe("BTCTxBuilder", function () {
//   let testBTCTxBuilder: TestBTCTxBuilder;

//   before(async function () {
//     const TestBTCTxBuilderFactory = await ethers.getContractFactory(
//       "TestBTCTxBuilder"
//     );
//     testBTCTxBuilder = await TestBTCTxBuilderFactory.deploy();
//     await testBTCTxBuilder.deployed();
//   });

//   describe("Transaction Building", function () {
//     it("should create an unsigned P2PKH transaction", async function () {
//       // Define transaction parameters
//       const txParams = {
//         version: 2,
//         inputs: [
//           {
//             txid: "0x7967a5185e907a25225574544c31f7b059c1a191d65b53dcc1554d339c4f9efc", // little-endian
//             vout: 0,
//             scriptSig: "0x", // Empty for unsigned tx
//             sequence: 0xffffffff,
//             witnessData: "0x",
//             scriptType: 1, // P2PKH
//           },
//         ],
//         outputs: [
//           {
//             value: 99000, // 0.00099000 BTC
//             scriptPubKey:
//               "0x76a9147ab89f9fae3f8043dcee5f7b5467a0f0a6e2f7e688ac", // P2PKH script
//           },
//         ],
//         locktime: 0,
//         hasWitness: false,
//       };

//       const unsignedTx = await testBTCTxBuilder.createUnsignedTransaction(
//         txParams
//       );
//       console.log("Unsigned P2PKH Transaction Hex:", unsignedTx);

//       // Verify the transaction has the expected format
//       expect(unsignedTx).to.not.be.empty;
//     });

//     it("should create a signed P2PKH transaction", async function () {
//       // Define transaction parameters
//       const txParams = {
//         version: 2,
//         inputs: [
//           {
//             txid: "0x7967a5185e907a25225574544c31f7b059c1a191d65b53dcc1554d339c4f9efc",
//             vout: 0,
//             scriptSig: "0x", // Will be filled by the library
//             sequence: 0xffffffff,
//             witnessData: "0x",
//             scriptType: 1, // P2PKH
//           },
//         ],
//         outputs: [
//           {
//             value: 99000, // 0.00099000 BTC
//             scriptPubKey:
//               "0x76a9147ab89f9fae3f8043dcee5f7b5467a0f0a6e2f7e688ac", // P2PKH script
//           },
//         ],
//         locktime: 0,
//         hasWitness: false,
//       };

//       // Example signature (would normally be generated by signing the transaction hash)
//       const signatures = [
//         {
//           r: "0x3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813",
//           s: "0x01", // Simplified for test
//           hashType: 0x01, // SIGHASH_ALL
//         },
//       ];

//       // Example public key
//       const pubKeys = [
//         "0x03e232cda91e719075a95ede4c36ea1419efbc145afd8896f36310b76b8020d4b1",
//       ];

//       const signedTx = await testBTCTxBuilder.createSignedTransaction(
//         txParams,
//         signatures,
//         pubKeys
//       );
//       console.log("Signed P2PKH Transaction Hex:", signedTx);

//       // Verify the transaction has the expected format
//       expect(signedTx).to.not.be.empty;
//     });

//     it("should create a SegWit (P2WPKH) transaction", async function () {
//       // Define transaction parameters for a SegWit transaction
//       const txParams = {
//         version: 2,
//         inputs: [
//           {
//             txid: "0x8ac60eb9575db5b2d987e29f301b5b819ea83a5c6579d282d189cc04b8e151ef",
//             vout: 1,
//             scriptSig: "0x", // Empty for SegWit
//             sequence: 0xffffffff,
//             witnessData: "0x", // Will be filled by the library
//             scriptType: 3, // P2WPKH
//           },
//         ],
//         outputs: [
//           {
//             value: 199000, // 0.00199000 BTC
//             scriptPubKey: "0x0014d85c2b71d0060b09c9886aeb815e50991dda124d", // P2WPKH script
//           },
//         ],
//         locktime: 0,
//         hasWitness: true,
//       };

//       // Example signature
//       const signatures = [
//         {
//           r: "0x304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee",
//           s: "0x01", // Simplified for test
//           hashType: 0x01, // SIGHASH_ALL
//         },
//       ];

//       // Example public key
//       const pubKeys = [
//         "0x025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357",
//       ];

//       const signedTx = await testBTCTxBuilder.createSignedTransaction(
//         txParams,
//         signatures,
//         pubKeys
//       );
//       console.log("Signed SegWit (P2WPKH) Transaction Hex:", signedTx);

//       // Verify the transaction has the expected format
//       expect(signedTx).to.not.be.empty;
//     });

//     it("should get the correct hash to sign for P2PKH", async function () {
//       const txParams = {
//         version: 2,
//         inputs: [
//           {
//             txid: "0x7967a5185e907a25225574544c31f7b059c1a191d65b53dcc1554d339c4f9efc",
//             vout: 0,
//             scriptSig: "0x", // Empty for hash calculation
//             sequence: 0xffffffff,
//             witnessData: "0x",
//             scriptType: 1, // P2PKH
//           },
//         ],
//         outputs: [
//           {
//             value: 99000,
//             scriptPubKey:
//               "0x76a9147ab89f9fae3f8043dcee5f7b5467a0f0a6e2f7e688ac",
//           },
//         ],
//         locktime: 0,
//         hasWitness: false,
//       };

//       // P2PKH scriptCode (locking script of the UTXO being spent)
//       const scriptCode = "0x76a914d0c59903c5bac2868760e90fd521a4665aa7652088ac";
//       const inputIndex = 0;
//       const value = 100000; // Value of the input being spent (0.001 BTC)
//       const hashType = 0x01; // SIGHASH_ALL

//       const hashToSign = await testBTCTxBuilder.getHashToSign(
//         txParams,
//         inputIndex,
//         scriptCode,
//         value,
//         hashType
//       );
//       console.log("Hash to sign for P2PKH:", hashToSign);

//       // Verify we got a valid hash
//       expect(hashToSign).to.not.equal(
//         "0x0000000000000000000000000000000000000000000000000000000000000000"
//       );
//     });

//     it("should get the correct hash to sign for P2WPKH (BIP143)", async function () {
//       const txParams = {
//         version: 2,
//         inputs: [
//           {
//             txid: "0x8ac60eb9575db5b2d987e29f301b5b819ea83a5c6579d282d189cc04b8e151ef",
//             vout: 1,
//             scriptSig: "0x", // Empty for SegWit
//             sequence: 0xffffffff,
//             witnessData: "0x",
//             scriptType: 3, // P2WPKH
//           },
//         ],
//         outputs: [
//           {
//             value: 199000,
//             scriptPubKey: "0x0014d85c2b71d0060b09c9886aeb815e50991dda124d",
//           },
//         ],
//         locktime: 0,
//         hasWitness: true,
//       };

//       // P2WPKH scriptCode (derived from witness program)
//       const scriptCode = "0x76a9141d0f172a0ecb48aee1be1f2687d2963ae33f71a188ac";
//       const inputIndex = 0;
//       const value = 200000; // Value of the input being spent (0.002 BTC)
//       const hashType = 0x01; // SIGHASH_ALL

//       const hashToSign = await testBTCTxBuilder.getHashToSign(
//         txParams,
//         inputIndex,
//         scriptCode,
//         value,
//         hashType
//       );
//       console.log("Hash to sign for P2WPKH (BIP143):", hashToSign);

//       // Verify we got a valid hash
//       expect(hashToSign).to.not.equal(
//         "0x0000000000000000000000000000000000000000000000000000000000000000"
//       );
//     });
//   });
// });
